# [TODO(macOS GH#217)
#
# This monkey-patching of the CocoaPods Specification class will strip our MS versions from the specifications and
# replace them with `1000.0.0`, which is the version that upstream always has set in `master`.
module StripMSVersion
  require 'cocoapods-core/specification'
  Pod::Specification.prepend(self)

  def source=(source)
    if source.is_a?(Hash) && source.has_key?(:tag)
      super(source.merge(:tag => StripMSVersion.strip(source[:tag])))
    else
      super
    end
  end

  def version=(version)
    super(StripMSVersion.strip(version))
  end

  def dependency(dep, *args)
    version, *other_version_requirements = args
    super(dep, *[StripMSVersion.strip(version), *other_version_requirements].compact)
  end

  private

  CURRENT_VERSION = JSON.parse(File.read('../package.json'))['version']

  def self.strip(version)
    version && (version == CURRENT_VERSION ? '1000.0.0' : version)
  end
end
# ]TODO(macOS GH#214)

source 'https://cdn.cocoapods.org/'

require_relative '../scripts/autolink-ios'

# TODO(macOS GH#214)
# Otherwise duplicate UUIDs are being generated between the iOS and macOS targets.
# FIXME: https://github.com/microsoft/react-native/issues/210
install! 'cocoapods', :deterministic_uuids => false

if ENV['USE_FRAMEWORKS'] == '1'
  puts "Installing pods with use_frameworks!"
  use_frameworks!
end

def pods()
  project 'RNTesterPods.xcodeproj'

  # Enable TurboModule
  use_react_native!(path: "..", turbo_modules_enabled: false)
  pod 'ReactCommon/turbomodule/samples', :path => '../ReactCommon'

  # Additional Pods which aren't included in the default Podfile
  pod 'React-ART', :path => '../Libraries/ART'
  pod 'React-RCTPushNotification', :path => '../Libraries/PushNotificationIOS'

  # Additional Pods which are classed as unstable
  #
  # To use fabric: add `fabric_enabled` option to the use_react_native method above, like below
  # use_react_native!(path: "..", fabric_enabled: true)
end

target 'RNTester' do
  platform :ios, '9.0'
  pods()
end

target 'RNTester-macOS' do
  platform :osx, '10.14'
  pods()
end

target 'RNTesterUnitTests' do
  platform :ios, '9.0'
  pods()
  pod 'React-RCTTest', :path => "RCTTest"
end

target 'RNTesterIntegrationTests' do
  platform :ios, '9.0'
  pods()
  pod 'React-RCTTest', :path => "RCTTest"
end

target 'RNTester-macOSUnitTests' do
  platform :osx, '10.14'
  pods()
  pod 'React-RCTTest', :path => "RCTTest"
end

target 'RNTester-macOSIntegrationTests' do
  platform :osx, '10.14'
  pods()
  pod 'React-RCTTest', :path => "RCTTest"
end

# [TODO(macOS ISS#2323203): these are special targets used by the internal Microsoft build pipeline
target 'iosDeviceBuild' do
  platform :ios, '9.0'
  pods()
end

target 'iosSimulatorBuild' do
  platform :ios, '9.0'
  pods()
end

target 'macOSBuild' do
  platform :osx, '10.14'
  pods()
end
# ]TODO(macOS ISS#2323203)

post_install do |installer|
  installer.pods_project.targets.each do |target|
    puts target.name
    # [TODO(macOS ISS#2323203): the internal Microsoft build pipeline needs iOS arm64e slices
    if target.platform_name == :ios
      target.build_configurations.each do |config|
        (config.build_settings['ARCHS'] ||= ['$(ARCHS_STANDARD)']) << 'arm64e'
        puts '  adding arm64e to ' + config.name
      end
    end
    # TODO(macOS ISS#2323203): the internal Microsoft build pipeline needs macOS arm64 slices
    if target.platform_name == :osx
      target.build_configurations.each do |config|
        (config.build_settings['ARCHS'] ||= ['$(ARCHS_STANDARD)']) << 'arm64'
        puts '  adding arm64 to ' + config.name
      end
    end
    # ]TODO(macOS ISS#2323203)
  end
end
